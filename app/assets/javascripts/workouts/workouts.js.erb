var workouts = angular.module('workouts', [
  'workouts.editor',
  'ui.router',
  'ui.bootstrap',
  'trainings',
  'trainees.traineeThumb',
  'shared',
  'toaster'
]);

workouts.config(['$stateProvider', function ($stateProvider) {
  $stateProvider.state('main.workouts', {
    url: '/workouts',
    abstract: true,
    controller: ['$scope', '$state', 'Training', '$stateParams', 'toaster', 'Auth', 'WorkoutsCtrlHelper',
      function ($scope, $state, Training, $stateParams, toaster, Auth, WorkoutsCtrlHelper) {
        WorkoutsCtrlHelper($scope, {workoutStateName: 'main.workouts.workout'});
      }
    ],
    templateUrl: '<%= asset_path('workouts/workouts.html') %>'
  });

  $stateProvider.state('main.workouts.workout', {
    url: '/:trainingId',
    controller: ['$scope', '$stateParams', 'WorkoutCtrlHelper',
      function ($scope, $stateParams, WorkoutCtrlHelper) {
        WorkoutCtrlHelper($scope, {trainingId: $stateParams.trainingId});
      }
    ],
    templateUrl: '<%= asset_path('workouts/workout.html') %>'
  });
}]);

workouts.directive('workoutsList', function () {
  return {
    restrict: 'E',
    scope: {
      workouts: '=',
      selectedWorkout: '=',
      onWorkoutSelected: '&',
      onWorkoutCreate: '&'
    },
    templateUrl: "<%= asset_path('workouts/list/workouts-list.html') %>"
  };
});

workouts.factory('WorkoutsCtrlHelper', ['toaster', 'Training', 'Auth', 'TraineeTraining', 'Trainee', '$state', 'WorkoutSelector',
  function (toaster, Training, Auth, TraineeTraining, Trainee, $state, WorkoutSelector) {
    return function ($scope, workoutsConfig) {
      $scope.workoutsContext = angular.extend({
        workoutStateName: 'main.workouts.workout',
        traineeId: null,
        title: 'Workouts',
        trainingList: [],
        selectedTraining: null,
        trainer: Auth.userDetails(),
        trainee: null,
        onAddPreparedWorkout: null, // fn(trainingId:Int, successCallback: fn(addedTraining: Training))
        onRefreshTrainingsList: Training.query,
        onRefreshTrainee: Auth.userDetails
      }, workoutsConfig);

      function onPreparedWorkoutAdded(training) {
        $scope.onWorkoutSelected(training);
        toaster.pop("success", "Training saved", "Successfully saved " + training.name);
      }

      $scope.addPreparedWorkout = function () {
        WorkoutSelector().result.then(function (selectedTraining) {
          $scope.workoutsContext.onAddPreparedWorkout(selectedTraining.id, onPreparedWorkoutAdded);
        });
      };

      $scope.onWorkoutSelected = function (training) {
        $state.go($scope.workoutsContext.workoutStateName, {trainingId: training.id});
      };

      $scope.onWorkoutCreate = function () {
        $state.go($scope.workoutsContext.workoutStateName, {trainingId: ''});
      };

      $scope.refreshUserDetails = function () {
        $scope.workoutsContext.trainee = $scope.workoutsContext.onRefreshTrainee();
      };

      function refreshTrainingsList() {
        $scope.workoutsContext.onRefreshTrainingsList(function (trainings) {
            $scope.workoutsContext.trainingList = trainings;
          },
          function () {
            toaster.pop("error", "Fetch workouts error", "Unable to fetch the list of workouts.");
          }
        );
      }

      $scope.refreshUserDetails();
      refreshTrainingsList();
    };
  }]);


workouts.factory('WorkoutCtrlHelper', ['$state', 'Training', 'toaster', function ($state, Training, toaster) {
  return function ($scope, workoutConfig) {
    $scope.workoutsContext = angular.extend($scope.workoutsContext, angular.extend(
      {
        trainingId: '',
        saveTraining: function (successCallback, failureCallback) {
          $scope.workoutsContext.selectedTraining.$save({traineeId: $scope.workoutsContext.traineeId}, successCallback, failureCallback);
        },
        createEmptyTraining: function () {
          return new Training({name: "Enter training name", exercises: []});
        },
        fetchTraining: function (successCallback, failureCallback) {
          Training.get({id: $scope.workoutsContext.trainingId}, successCallback, failureCallback);
        },
        deleteTraining: function (successCallback, failureCallback) {
          Training.delete({id: $scope.workoutsContext.trainingId}, successCallback, failureCallback);
        }
      }, workoutConfig));


    if ($scope.workoutsContext.trainingId === '') {
      $scope.workoutsContext.selectedTraining = $scope.workoutsContext.createEmptyTraining();
    } else {
      $scope.workoutsContext.fetchTraining(function (training) {
        $scope.workoutsContext.selectedTraining = training;
      }, function () {
        toaster.pop("error", "Fetch workout error", "Unable to fetch the workout.");
      });
    }

    $scope.onSaveClicked = function () {
      $scope.workoutsContext.saveTraining(function (training) {
        toaster.pop("success", "Training saved", "Sucessfully saved " + training.name);
        $state.go($scope.workoutsContext.workoutStateName, {trainingId: training.id}, {reload: true});
      }, function () {
        toaster.pop("error", "Training save error", "Error saving " + training.name);
      });
    };

    $scope.onDeleteClicked = function () {
      $scope.workoutsContext.deleteTraining(function () {
        toaster.pop("info", "Workout deleted", "The workout was successfully deleted.");
        $state.go($scope.workoutsContext.workoutStateName, {trainingId: ''}, {reload: true});
      }, function () {
        toaster.pop("error", "Workout not deleted", "Could not delete the workout. Please try logging in again.");
      });
    };
  };
}]);
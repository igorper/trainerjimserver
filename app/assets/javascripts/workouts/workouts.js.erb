var workouts = angular.module('workouts', [
  'workouts.editor',
  'ui.router',
  'ui.bootstrap',
  'trainings',
  'trainees.traineeThumb',
  'shared',
  'toaster'
]);

workouts.config(['$stateProvider', function ($stateProvider) {
  $stateProvider
    .state('main.workouts', {
      url: '/workouts',
      abstract: true,
      controller: 'WorkoutsCtrl',
      templateUrl: '<%= asset_path('workouts/workouts.html') %>'
    })
    .state('main.workouts.workout', {
      url: '/:trainingId',
      controller: 'WorkoutCtrl',
      templateUrl: '<%= asset_path('workouts/workout.html') %>'
    })
  ;
}]);

workouts.controller("WorkoutsCtrl", ['$scope', '$state', 'Training', '$stateParams', 'toaster', 'Auth',
  function ($scope, $state, Training, $stateParams, toaster, Auth) {
    $scope.workoutsContext = {
      isPreparedWorkoutsEnabled: false,
      title: 'My workouts',
      trainingList: [],
      selectedTraining: null,
      trainer: null
    };

    $scope.onWorkoutSelected = function (training) {
      $state.go('main.workouts.workout', {trainingId: training.id});
    };

    $scope.onWorkoutCreate = function () {
      $state.go('main.workouts.workout', {trainingId: ''});
    };

    $scope.refreshUserDetails = function () {
      $scope.userDetails = Auth.userDetails();
    };

    function refreshTrainingsList() {
      Training.query(function (trainings) {
        $scope.workoutsContext.trainingList = trainings;
      }, function () {
        toaster.pop("error", "Fetch trainings error", "Unable to fetch the trainings list");
      });
    }

    $scope.refreshUserDetails();
    refreshTrainingsList();
  }
]);

workouts.controller('WorkoutCtrl', ['$scope', 'Training', '$stateParams', 'toaster', '$state',
  function ($scope, Training, $stateParams, toaster, $state) {
    function createEmptyTraining() {
      return new Training({name: "Enter training name", exercises: []});
    }

    if ($stateParams.trainingId === '') {
      $scope.workoutsContext.selectedTraining = createEmptyTraining();
    } else {
      Training.get({id: $stateParams.trainingId}, function (training) {
        $scope.workoutsContext.selectedTraining = training;
      }, function () {
        toaster.pop("error", "Fetch workout error", "Unable to fetch the workout.");
      });
    }

    $scope.onSaveClicked = function (selectedTraining) {
      selectedTraining.$save(function (training) {
        toaster.pop("success", "Training saved", "Sucessfully saved " + selectedTraining.name);
        $state.go('main.workouts.workout', {trainingId: training.id}, {reload: true});
      }, function () {
        toaster.pop("error", "Training save error", "Error saving " + selectedTraining.name);
      });
    };

    $scope.onDeleteClicked = function (selectedTraining) {
      Training.delete({id: selectedTraining.id}, function () {
        toaster.pop("info", "Workout deleted", "The workout was successfully deleted.");
        $state.go('main.workouts.workout', {trainingId: ''}, {reload: true});
      }, function () {
        toaster.pop("error", "Workout not deleted", "Could not delete the workout. Please try logging in again.");
      });
    };
  }
]);

workouts.directive('workoutsList', function () {
  return {
    restrict: 'E',
    scope: {
      workouts: '=',
      selectedWorkout: '=',
      onWorkoutSelected: '&',
      onWorkoutCreate: '&'
    },
    templateUrl: "<%= asset_path('workouts/list/workouts-list.html') %>"
  };
});
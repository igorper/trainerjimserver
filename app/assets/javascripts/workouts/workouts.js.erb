var workouts = angular.module('workouts', [
  'workouts.editor',
  'ui.router',
  'ui.bootstrap',
  'trainings',
  'trainees.traineeThumb',
  'users',
  'toaster',
  'util.promiseUi',
  'translations'
]);

workouts.config(['$stateProvider', function ($stateProvider) {
  $stateProvider.state('main.workouts', {
    url: '/workouts',
    abstract: true,
    controller: ['$scope', '$state', 'WorkoutsCtrlHelper', function ($scope, $state, WorkoutsCtrlHelper) {
      WorkoutsCtrlHelper($scope, {workoutStateName: 'main.workouts.workout'});
    }],
    templateUrl: '<%= asset_path('workouts/workouts.html') %>'
  });

  $stateProvider.state('main.workouts.instructions', {
    url: '/instructions',
    templateUrl: '<%= asset_path('workouts/workouts-instructions.html') %>'
  });

  $stateProvider.state('main.workouts.workout', {
    url: '/:trainingId',
    controller: ['$scope', '$stateParams', 'WorkoutCtrlHelper', function ($scope, $stateParams, WorkoutCtrlHelper) {
      WorkoutCtrlHelper($scope, {trainingId: $stateParams.trainingId});
    }],
    templateUrl: '<%= asset_path('workouts/workout.html') %>'
  });
}]);

workouts.directive('workoutsList', function () {
  return {
    restrict: 'E',
    scope: {
      workouts: '=',
      selectedWorkout: '=',
      onWorkoutSelected: '&',
      onWorkoutCreate: '&'
    },
    templateUrl: "<%= asset_path('workouts/list/workouts-list.html') %>"
  };
});

workouts.factory('WorkoutsCtrlHelper', ['toaster', 'Training', 'User', 'TraineeTraining', 'Trainee', '$state', 'WorkoutSelector',
  '$translate', '$rootScope',
  function (toaster, Training, User, TraineeTraining, Trainee, $state, WorkoutSelector, $translate, $rootScope) {
    return function ($scope, workoutsConfig) {
      function applyTranslations(){
        $translate(['WORKOUTS_CTRL_HELPER_TEMPLATES',
          'WORKOUTS_CTRL_HELPER_SAVED_MSG_CONTENT',
          'WORKOUTS_CTRL_HELPER_SAVED_MSG_CONTENT',
          'WORKOUTS_CTRL_HELPER_ERR_SAVE_MSG_TITLE',
          'WORKOUTS_CTRL_HELPER_ERR_SAVE_MSG_CONTENT',
          'WORKOUTS_CTRL_HELPER_ERR_AVATAR_MSG_TITLE',
          'WORKOUTS_CTRL_HELPER_ERR_AVATAR_MSG_CONTENT',
          'WORKOUTS_CTRL_HELPER_ERR_FETCH_MSG_TITLE',
          'WORKOUTS_CTRL_HELPER_ERR_FETCH_MSG_CONTENT'
        ]).then(function(translations){
          $scope.workoutsContext.title = translations.WORKOUTS_CTRL_HELPER_TEMPLATES;
          $scope.savedMsgTitle = translations.WORKOUTS_CTRL_HELPER_SAVED_MSG_TITLE;
          $scope.savedMsgContent = translations.WORKOUTS_CTRL_HELPER_SAVED_MSG_CONTENT;
          $scope.errorSaveMsgTitle = translations.WORKOUTS_CTRL_HELPER_ERR_SAVE_MSG_TITLE;
          $scope.errorSaveMsgContent = translations.WORKOUTS_CTRL_HELPER_ERR_SAVE_MSG_CONTENT;
          $scope.avatarErrorTitle = translations.WORKOUTS_CTRL_HELPER_ERR_AVATAR_MSG_TITLE;
          $scope.avatarErrorContent  = translations.WORKOUTS_CTRL_HELPER_ERR_AVATAR_MSG_CONTENT;
          $scope.fetchErrMsgTitle = translations.WORKOUTS_CTRL_HELPER_ERR_FETCH_MSG_TITLE;
          $scope.fetchErrMsgContent = translations.WORKOUTS_CTRL_HELPER_ERR_FETCH_MSG_CONTENT;
        });
      }

      applyTranslations();

      $rootScope.$on('$translateChangeSuccess', function () {
        applyTranslations();
      });

      $scope.workoutsContext = angular.extend({
        workoutStateName: 'main.workouts.workout',
        traineeId: null,
        title: 'Templates',
        trainingList: [],
        trainer: User.current(),
        trainee: null,
        addPreparedWorkout: null, // fn(trainingId:Int, successCallback, failureCallback)
        fetchTrainingsList: Training.query,
        fetchTrainee: User.current
      }, workoutsConfig);

      $scope.onAddPreparedWorkoutClicked = function () {
        WorkoutSelector().result.then(function (selectedTraining) {
          $scope.workoutsContext.addPreparedWorkout(selectedTraining.id, function (training) {
              toaster.pop("success", $scope.savedMsgTitle, $scope.savedMsgContent + training.name);
              $scope.onWorkoutSelected(training);
              $scope.refreshTrainingsList();
            },
            function () {
              toaster.pop("error", $scope.errorSaveMsgTitle, $scope.errorSaveMsgContent);
            }
          );
        });
      };

      $scope.onWorkoutSelected = function (training) {
        $state.go($scope.workoutsContext.workoutStateName, {trainingId: training.id});
      };

      $scope.onWorkoutCreate = function () {
        $state.go($scope.workoutsContext.workoutStateName, {trainingId: ''});
      };

      $scope.refreshUserDetails = function () {
        $scope.workoutsContext.trainee = $scope.workoutsContext.fetchTrainee(function () {
        }, function () {
          toaster.pop("error", $scope.avatarErrorTitle, $scope.avatarErrorContent);
        });
      };

      $scope.refreshTrainingsList = function () {
        $scope.workoutsContext.trainingList = $scope.workoutsContext.fetchTrainingsList(function () {
          },
          function () {
            toaster.pop("error", $scope.fetchErrMsgTitle, $scope.fetchErrMsgContent);
          }
        );
      };

      $scope.refreshUserDetails();
      $scope.refreshTrainingsList();
    };
  }]);


workouts.factory('WorkoutCtrlHelper', ['$state', 'Training', 'toaster', '$translate', '$rootScope', function ($state, Training, toaster, $translate, $rootScope) {
  return function ($scope, workoutConfig) {
    function applyTranslations(){
      $translate(['WORKOUT_CTRL_HELPER_SAVED_MSG_TITLE',
        'WORKOUT_CTRL_HELPER_SAVED_MSG_CONTENT',
        'WORKOUT_CTRL_HELPER_FETCH_ERR_MSG_TITLE',
        'WORKOUT_CTRL_HELPER_FETCH_ERR_MSG_CONTENT',
        'WORKOUT_CTRL_HELPER_DELETED_MSG_TITLE',
        'WORKOUT_CTRL_HELPER_DELETED_MSG_CONTENT',
        'WORKOUT_CTRL_HELPER_ERR_DELETED_MSG_TITLE',
        'WORKOUT_CTRL_HELPER_ERR_DELETED_MSG_CONTENT'
      ]).then(function(translations){
        $scope.savedMsgTitle = translations.WORKOUT_CTRL_HELPER_SAVED_MSG_TITLE;
        $scope.savedMsgContent = translations.WORKOUT_CTRL_HELPER_SAVED_MSG_CONTENT;
        $scope.fetctErrMsgTitle = translations.WORKOUT_CTRL_HELPER_FETCH_ERR_MSG_TITLE;
        $scope.fetchErrMsgContent = translations.WORKOUT_CTRL_HELPER_FETCH_ERR_MSG_CONTENT;
        $scope.deletedMsgTitle = translations.WORKOUT_CTRL_HELPER_DELETED_MSG_TITLE;
        $scope.deletedMsgContent = translations.WORKOUT_CTRL_HELPER_DELETED_MSG_CONTENT;
        $scope.errDeletedMsgTitle = translations.WORKOUT_CTRL_HELPER_ERR_DELETED_MSG_TITLE;
        $scope.errDeletedMsgContent = translations.WORKOUT_CTRL_HELPER_ERR_DELETED_MSG_CONTENT;
      });
    }

    applyTranslations();

    $rootScope.$on('$translateChangeSuccess', function () {
      applyTranslations();
    });

    $scope.workoutsContext = angular.extend($scope.workoutsContext, angular.extend({
      trainingId: '',
      saveTraining: function (successCallback, failureCallback) {
        return $scope.workoutsContext.selectedTraining.$save({traineeId: $scope.workoutsContext.traineeId}, successCallback, failureCallback);
      },
      createEmptyTraining: function () {
        return new Training({name: "Vpi≈°ite ime treninga", exercises: [], trainee: $scope.workoutsContext.trainee});
      },
      fetchTraining: function (successCallback, failureCallback) {
        return Training.get({id: $scope.workoutsContext.trainingId, language: $translate.proposedLanguage()}, successCallback, failureCallback);
      },
      deleteTraining: function (successCallback, failureCallback) {
        return Training.delete({id: $scope.workoutsContext.trainingId}, successCallback, failureCallback);
      }
    }, workoutConfig));

    if ($scope.workoutsContext.trainingId === '') {
      $scope.workoutsContext.selectedTraining = $scope.workoutsContext.createEmptyTraining();
    } else {
      $scope.workoutsContext.selectedTraining = $scope.workoutsContext.fetchTraining(function () {
      }, function () {
        toaster.pop("error", $scope.fetctErrMsgTitle, $scope.fetchErrMsgContent);
      });
    }

    $scope.onSaveClicked = function () {
      $scope.workoutsContext.saveTraining(function (training) {
        toaster.pop("success", $scope.savedMsgTitle, $scope.savedMsgContent + training.name);
        $state.go($scope.workoutsContext.workoutStateName, {trainingId: training.id});
        $scope.refreshTrainingsList();
      }, function () {
        toaster.pop("error", $scope.fetctErrMsgTitle, $scope.fetchErrMsgContent + training.name);
      });
    };

    $scope.onDeleteClicked = function () {
      $scope.workoutsContext.deleteTraining(function () {
        toaster.pop("info", $scope.deletedMsgTitle, $scope.deletedMsgContent);
        $state.go($scope.workoutsContext.workoutStateName, {trainingId: ''});
        $scope.refreshTrainingsList();
      }, function () {
        toaster.pop("error", $scope.errDeletedMsgTitle, $scope.errDeletedMsgContent);
      });
    };
  };
}]);

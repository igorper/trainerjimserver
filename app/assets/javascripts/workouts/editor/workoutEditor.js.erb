//= require angular/angular
//= require angular-ui-sortable/sortable
//= require angular-sanitize/angular-sanitize
//= require trainings/training
//= require shared/shared
//= require angular-animate/angular-animate
//= require angularjs-toaster/toaster
//= require exerciseTypes/exerciseTypesSelector
//= require exerciseTypes/exerciseTypeDetails
//= require exerciseTypes/exerciseType

angular.module('workouts.editor', [
  'ui.router',
  'ui.bootstrap',
  'ui.sortable',
  'ngSanitize',
  'trainings',
  'shared',
  'ngAnimate',
  'toaster',
  'exerciseTypes.selector',
  'exerciseTypes.exerciseType',
  'exerciseTypes.exerciseTypeDetails'
])
  .directive('workoutEditor', function () {
    return {
      restrict: 'E',
      scope: {
        training: '=training',
        onSaveClicked: '&onSaveClicked',
        onDeleteClicked: '&onDeleteClicked'
      },
      controller: 'WorkoutEditorCtrl',
      templateUrl: '<%= asset_path('workouts/editor/workout-editor.html') %>'
    };
  })
  .controller('WorkoutEditorCtrl', ['$scope', 'ExerciseType', 'ExerciseTypesSelector', 'ExerciseTypeDetailsDialog', function ($scope, ExerciseType, ExerciseTypesSelector, ExerciseTypeDetailsDialog) {
    var REPETITIONS_STEP = 1;
    var WEIGHT_STEP = 5;
    var REST_STEP = 5;

    $scope.fetchExerciseType = function (exerciseTypeId) {
      return ExerciseType.get({id: exerciseTypeId});
    };

    $scope.changeSelectedSeries = function (exercise, seriesIdx) {
      exercise.selectedSeries = seriesIdx;
    };

    $scope.showExerciseTypeDetails = function (exerciseType) {
      ExerciseTypeDetailsDialog(exerciseType);
    };

    $scope.sortableOptions = {
      handle: '.move'
    };

    $scope.getSelectedSeries = function (exercise) {
      if (exercise.selectedSeries == undefined) {
        exercise.selectedSeries = 0;
      }
      return exercise.series[exercise.selectedSeries];
    };

    $scope.addSeries = function (exercise) {
      exercise.series.push(angular.copy($scope.getSelectedSeries(exercise)));
    };

    $scope.removeSeries = function (exercise) {
      // there has to be at least one series
      if (exercise.series.length > 1) {
        exercise.series.splice(exercise.series.indexOf($scope.getSelectedSeries(exercise)), 1);
      }
    };

    $scope.removeExercise = function (exercise) {
      // at least one exercise has to be left in the training
      if ($scope.training.exercises.length > 1) {
        $scope.training.exercises.splice($scope.training.exercises.indexOf(exercise), 1);
      }
    }

    $scope.applyToAllSeries = function (exercise) {
      var selectedSeries = exercise.series[exercise.selectedSeries];
      for (var i = 0; i < $scope.training.exercises.length; i++) {
        var loopedExercise = $scope.training.exercises[i];
        // set selected series information to all series of the same exercise type.
        // we have to loop all the exercises and not just set series information for
        // the input exercise, as the same exercise could be added many times to the training plan
        // (this is particularly common in training plans where different exercises are added in blocks of e.g.
        // one series of two successive exercise without rest)
        if (loopedExercise.exercise_type.id == exercise.exercise_type.id) {
          for (var j = 0; j < loopedExercise.series.length; j++) {
            var loopedSeries = loopedExercise.series[j];
            loopedSeries.repeat_count = selectedSeries.repeat_count;
            loopedSeries.weight = selectedSeries.weight;
            loopedSeries.rest_time = selectedSeries.rest_time;
          }
        }
      }
    }

    $scope.increaseSeriesRepetitions = function (exercise) {
      $scope.getSelectedSeries(exercise).repeat_count += REPETITIONS_STEP;
    };

    $scope.decreaseSeriesRepetitions = function (exercise) {
      var series = $scope.getSelectedSeries(exercise);
      series.repeat_count = series.repeat_count < REPETITIONS_STEP ? 0 : series.repeat_count - REPETITIONS_STEP;
    };

    $scope.increaseSeriesWeight = function (exercise) {
      $scope.getSelectedSeries(exercise).weight += WEIGHT_STEP;
    };

    $scope.decreaseSeriesWeight = function (exercise) {
      var series = $scope.getSelectedSeries(exercise);
      series.weight = series.weight < WEIGHT_STEP ? 0 : series.weight - WEIGHT_STEP;
    };

    $scope.increaseSeriesRest = function (exercise) {
      $scope.getSelectedSeries(exercise).rest_time += REST_STEP;
    };

    $scope.decreaseSeriesRest = function (exercise) {
      var series = $scope.getSelectedSeries(exercise);
      series.rest_time = series.rest_time < REST_STEP ? 0 : series.rest_time - REST_STEP;
    };

    $scope.editExercise = function () {
      ExerciseTypesSelector({
        onAddExerciseType: function (chosenExerciseType) {
          $scope.training.exercises.push({
            duration_after_repetition: null,
            duration_up_repetition: null,
            duration_middle_repetition: null,
            duration_down_repetition: null,
            guidance_type: "manual",
            selectedSeries: 0,
            series: [
              {
                repeat_count: 0,
                weight: 0,
                rest_time: 0
              }
            ],
            exercise_type: chosenExerciseType
          });
        }
      });
    };
  }])
;


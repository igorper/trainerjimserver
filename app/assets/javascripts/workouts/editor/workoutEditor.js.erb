var workoutEditor = angular.module('workouts.editor', [
  'ngStorage',
  'ui.router',
  'ui.bootstrap',
  'ui.sortable',
  'trainings',
  'toaster',
  'exerciseTypes.selector',
  'exerciseTypes.exerciseType',
  'exerciseTypes.exerciseTypeDetails',
  'exercises.editor',
  'translations',
  'pascalprecht.translate'
]);

workoutEditor.directive('workoutEditor', function () {
  return {
    restrict: 'E',
    scope: {
      training: '=',
      trainer: '=',
      onSaveClicked: '&',
      onDeleteClicked: '&'
    },
    controller: 'WorkoutEditorCtrl',
    templateUrl: '<%= asset_path('workouts/editor/workout-editor-v1.html') %>'
  };
});

workoutEditor.controller('WorkoutEditorCtrl', ['$scope', 'ExerciseType', 'ExerciseTypesSelector', '$localStorage',
  '$translate', '$rootScope', function ($scope, ExerciseType, ExerciseTypesSelector, $localStorage, $translate, $rootScope) {
  function applyTranslations(){
    $translate(['WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_1',
      'WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_2',
      'WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_3',
      'WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_4',
      'WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_5',
      'WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_6',
      'WORKOUT_EDITOR_CTRL_TUTORIAL_DONE',
      'WORKOUT_EDITOR_CTRL_TUTORIAL_SKIP',
      'WORKOUT_EDITOR_CTRL_TUTORIAL_NEXT',
      'WORKOUT_EDITOR_CTRL_TUTORIAL_BACK',
    ]).then(function(translations){
      $scope.tutorial_step1 = translations.WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_1;
      $scope.tutorial_step2 = translations.WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_2;
      $scope.tutorial_step3 = translations.WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_3;
      $scope.tutorial_step4 = translations.WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_4;
      $scope.tutorial_step5 = translations.WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_5;
      $scope.tutorial_step6 = translations.WORKOUT_EDITOR_CTRL_TUTORIAL_STEP_6;
      $scope.tutorial_done = translations.WORKOUT_EDITOR_CTRL_TUTORIAL_DONE;
      $scope.tutorial_skip = translations.WORKOUT_EDITOR_CTRL_TUTORIAL_SKIP;
      $scope.tutorial_next = translations.WORKOUT_EDITOR_CTRL_TUTORIAL_NEXT;
      $scope.tutorial_back = translations.WORKOUT_EDITOR_CTRL_TUTORIAL_BACK;
    });
  }

  applyTranslations();

  $rootScope.$on('$translateChangeSuccess', function () {
    applyTranslations();
  });

  $scope.fetchExerciseType = function (exerciseTypeId) {
    return ExerciseType.get({id: exerciseTypeId, language: $translate.proposedLanguage()});
  };

  $scope.sortableOptions = {
    handle: '.move'
  };

  $scope.removeExercise = function (exercise) {
    // at least one exercise has to be left in the training
    if ($scope.training.exercises.length > 1) {
      $scope.training.exercises.splice($scope.training.exercises.indexOf(exercise), 1);
    }
  };

  $scope.applyToAllSeries = function (exercise, selectedSeries) {
    for (var i = 0; i < $scope.training.exercises.length; i++) {
      var loopedExercise = $scope.training.exercises[i];
      // set selected series information to all series of the same exercise type.
      // we have to loop all the exercises and not just set series information for
      // the input exercise, as the same exercise could be added many times to the training plan
      // (this is particularly common in training plans where different exercises are added in blocks of e.g.
      // one series of two successive exercise without rest)
      if (loopedExercise.exercise_type.id == exercise.exercise_type.id) {
        for (var j = 0; j < loopedExercise.series.length; j++) {
          var loopedSeries = loopedExercise.series[j];
          loopedSeries.repeat_count = selectedSeries.repeat_count;
          loopedSeries.weight = selectedSeries.weight;
          loopedSeries.rest_time = selectedSeries.rest_time;
        }
      }
    }
  };

  function addExercise(exerciseType) {
    $scope.training.exercises.push({
      duration_after_repetition: null,
      duration_up_repetition: null,
      duration_middle_repetition: null,
      duration_down_repetition: null,
      guidance_type: "manual",
      selectedSeries: 0,
      series: [
        {
          repeat_count: 0,
          weight: 0,
          rest_time: 0
        }
      ],
      exercise_type: exerciseType
    });
    scrollToLastExercise();
  }

  function scrollToLastExercise() {
    var elementToScrollTo = $('.exercise-item:last');
    $('html, body').animate({scrollTop: elementToScrollTo.offset().top}, 500);
  }

  $scope.editExercise = function () {
    ExerciseTypesSelector({
      onAddExerciseType: addExercise,
      editorUserId: $scope.trainer.id,
      isAdministrator: $scope.trainer.is_admin
    }).result.then(scrollToLastExercise);
  };

  $scope.showTrainingInstructions = function() {
    /*if ($localStorage.trainingInstructionsSeen) {
      return;
    }*/
    var intro = introJs();
    intro.setOptions({
      steps: [
        {
          intro: $scope.tutorial_step1
        },
        {
          element: document.querySelector('.workouts-list .create-workout'),
          intro: $scope.tutorial_step2,
          position: 'top'
        },
        {
          element: document.querySelector('.workout-editor .btn.add-exercise'),
          intro: $scope.tutorial_step3,
          position: 'left'
        },
        {
          element: document.querySelector('.workout-editor .the-name-value'),
          intro: $scope.tutorial_step4
        },
        {
          element: document.querySelector('.workout-editor .btn.save'),
          intro: $scope.tutorial_step5,
          position: 'left'
        },
        {
          intro: $scope.tutorial_step6
        }
      ],
      doneLabel: $scope.tutorial_done,
      skipLabel: $scope.tutorial_skip,
      nextLabel: $scope.tutorial_next,
      prevLabel: $scope.tutorial_back,
      tooltipClass: "jim-tutorial"
    });

    function markSeen() {
      $localStorage.trainingInstructionsSeen = true;
    }

    intro.oncomplete(markSeen);
    intro.onexit(markSeen);
    intro.start();
  }
}]);


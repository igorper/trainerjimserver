var exerciseTypePanel = angular.module('exerciseTypes.exerciseTypePanel', [
  'util.filters.propsFilter',
  'util.promiseUi',
  'ui.bootstrap',
  'exerciseGroups.exerciseGroupsSelector'
]);

exerciseTypePanel.directive('exerciseTypePanel', [function () {
  return {
    restrict: 'E',
    scope: {
      onExerciseTypeClicked: '&',
      onExerciseTypeAddClicked: '&',
      onExerciseTypeDeleteClicked: '&',
      onExerciseTypeEditClicked: '&',
      editorUserId: '=',
      isAdminMode: '=',
      exerciseGroups: '=',
      exerciseTypes: '=',
      userExerciseTypePhotos: '='
    },
    templateUrl: '<%= asset_path('exerciseTypes/exercise-type-panel.html') %>',
    controller: ['$scope', function ($scope) {
      $scope.filter = {};
      $scope.orderedExerciseTypes = [];
      $scope.selectedExerciseGroupIds = [];
      $scope.pageIndex = 0;
      $scope.itemsPerPage = 20;
      $scope.userExerciseTypePhotos.$promise.then(createExerciseTypeIdToPhotoMap);
      $scope.exerciseTypes.$promise.then(function (exerciseTypes) {
        $scope.orderedExerciseTypes = _.sortBy(exerciseTypes, function (exerciseType) {
          return exerciseType.name;
        });
        refreshExerciseTypeGrid();
      });
      $scope.$watchGroup(['filter.keyword', 'filter.my_exercises_only', 'selectedExerciseGroupIds'], resetExerciseTypeGridPagination);

      $scope.goToNextPage = function () {
        ++$scope.pageIndex;
        refreshExerciseTypeGrid();
      };

      $scope.goToPreviousPage = function () {
        --$scope.pageIndex;
        refreshExerciseTypeGrid();
      };

      function resetExerciseTypeGridPagination() {
        $scope.pageIndex = 0;
        refreshExerciseTypeGrid();
      }

      function refreshExerciseTypeGrid() {
        var exerciseTypes = _.chain($scope.orderedExerciseTypes);
        if ($scope.filter.my_exercises_only) {
          exerciseTypes = exerciseTypes.where({owner_id: $scope.editorUserId});
        }
        exerciseTypes = filterByName(exerciseTypes, $scope.filter.keyword);
        exerciseTypes = filterBySelectedGroups(exerciseTypes, $scope.selectedExerciseGroupIds);
        exerciseTypes = exerciseTypes.drop($scope.pageIndex * $scope.itemsPerPage);
        exerciseTypes = exerciseTypes.take($scope.itemsPerPage + 1).value();
        $scope.hasMoreExerciseTypes = exerciseTypes.length > $scope.itemsPerPage;
        $scope.filteredExerciseTypes = _.take(exerciseTypes, $scope.itemsPerPage);
      }

      function filterByName(itemsWithName, stringFilter) {
        if (!_.isString(stringFilter) || _.isEmpty(stringFilter)) {
          return itemsWithName;
        }
        stringFilter = stringFilter.toLowerCase();
        return itemsWithName.filter(function (item) {
          return _.isString(item.name) && item.name.toLowerCase().indexOf(stringFilter) >= 0;
        });
      }

      function filterBySelectedGroups(exerciseTypes, selectedGroupIds) {
        if (_.isEmpty(selectedGroupIds)) {
          return exerciseTypes;
        }
        return exerciseTypes.filter(function (exerciseType) {
          return _.all(selectedGroupIds, function (selectedGroup) {
            return _.contains(exerciseType.exercise_groups, selectedGroup);
          });
        });
      }

      function createExerciseTypeIdToPhotoMap(exerciseTypePhotos) {
        $scope.exerciseTypeIdToThumbPath = _.object(_.map(exerciseTypePhotos, function (el) {
          return [el.exercise_type_id, el.thumb_image_url];
        }));
      }

      $scope.canEditExerciseType = function (exerciseType) {
        return exerciseType.owner_id == $scope.editorUserId || $scope.isAdminMode;
      };

      function getExerciseTypePrimaryPhoto(exerciseType) {
        if ($scope.exerciseTypeIdToThumbPath) {
          var thumbPhotoSrc = $scope.exerciseTypeIdToThumbPath[exerciseType.id];
          if (thumbPhotoSrc) {
            return thumbPhotoSrc;
          }
        }
        return null;
      }

      function getFirstExerciseGroupPhoto(exerciseGroupIds) {
        return _.chain($scope.exerciseGroups)
          .filter(function (exerciseGroup) {
            return !exerciseGroup.thumb_image_url.startsWith('/photos/thumb/missing') &&
              _.contains(exerciseGroupIds, exerciseGroup.id);
          })
          .map(function (exerciseGroup) {
            return exerciseGroup.thumb_image_url;
          })
          .first()
          .value();
      }

      $scope.getPrimaryPhoto = function (exerciseType) {
        return getExerciseTypePrimaryPhoto(exerciseType) ||
          getFirstExerciseGroupPhoto(exerciseType.exercise_groups) ||
          'photos/exercise-types/thumb/weight1.png';
      };
    }]
  };
}]);
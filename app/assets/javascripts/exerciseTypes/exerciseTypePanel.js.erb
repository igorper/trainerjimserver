var exerciseTypePanel = angular.module('exerciseTypes.exerciseTypePanel', [
  'exerciseTypes.exerciseType',
  'users.exerciseTypes.photos',
  'util.filters.propsFilter',
  'util.promiseUi',
  'ui.bootstrap',
  'exerciseGroups.exerciseGroup',
  'exerciseTypes.exerciseTypeEditor'
]);

exerciseTypePanel.directive('exerciseTypePanel', [function () {
  return {
    restrict: 'E',
    scope: {onExerciseTypeClicked: '&', editorUserId: '=', isAdministrator: '='},
    templateUrl: '<%= asset_path('exerciseTypes/exercise-type-panel.html') %>',
    controller: ['$scope', 'ExerciseType', 'UserExerciseTypePhotos', 'ExerciseGroup', function ($scope, ExerciseType, UserExerciseTypePhotos, ExerciseGroup) {
      $scope.NO_GROUP = 'noGroup';
      $scope.selection = {};
      $scope.filter = {};
      $scope.isChoosingExerciseTypes = true;

      function refreshExerciseTypesList() {
        $scope.exerciseTypes = ExerciseType.query();
      }

      function unselectExerciseGroups() {
        $scope.selection.group = $scope.NO_GROUP;
        $scope.selection.machineGroup = $scope.NO_GROUP;
      }

      function toRadioGroupSelection(availableGroups, groupIds, radioGroupPrefix) {
        var foundExerciseGroup = _(availableGroups).find(function (exerciseGroup) {
          return _(groupIds).contains(exerciseGroup.id);
        });
        return foundExerciseGroup ? radioGroupPrefix + foundExerciseGroup.id : $scope.NO_GROUP;
      }

      function selectExerciseGroups(exerciseGroups) {
        console.log("Selecting exercise groups:", exerciseGroups);
        $scope.selection.group = toRadioGroupSelection($scope.exerciseGroups, exerciseGroups, "group-");
        $scope.selection.machineGroup = toRadioGroupSelection($scope.machineGroups, exerciseGroups, "machineGroup-");
      }

      refreshExerciseTypesList();
      unselectExerciseGroups();

      function idOfGroup(exerciseGroup) {
        var indexOfDash = exerciseGroup.indexOf('-');
        return indexOfDash < 0 ? null : parseInt(exerciseGroup.substring(indexOfDash + 1));
      }

      $scope.getSelectedGroupIds = function () {
        return _.filter(
          [idOfGroup($scope.selection.group), idOfGroup($scope.selection.machineGroup)],
          _.isNumber
        );
      };

      UserExerciseTypePhotos.primaryPhotos(function (exerciseTypePhotos) {
        $scope.exerciseTypeIdToThumbPath = _.object(_.map(exerciseTypePhotos, function (el) {
          return [el.exercise_type_id, el.thumb_image_url];
        }));
      });

      $scope.allExerciseGroups = ExerciseGroup.query(function (exerciseGroups) {
        $scope.exerciseGroups = _.filter(exerciseGroups, function (exerciseGroup) {
          return !exerciseGroup.is_machine_group;
        });
        $scope.machineGroups = _.filter(exerciseGroups, function (exerciseGroup) {
          return exerciseGroup.is_machine_group;
        });
      });

      $scope.hasAnyGroups = function () {
        return !_.isEmpty($scope.machineGroups) || !_.isEmpty($scope.exerciseGroups);
      };

      $scope.getPrimaryPhoto = function (exerciseType) {
        if ($scope.exerciseTypeIdToThumbPath) {
          var thumbPhotoSrc = $scope.exerciseTypeIdToThumbPath[exerciseType.id];
          if (thumbPhotoSrc) {
            return thumbPhotoSrc;
          }
        }
        return 'images/medium/missing.png';
      };

      function editExerciseType(exerciseTypeToEdit) {
        unselectExerciseGroups();
        $scope.editedExerciseType = exerciseTypeToEdit;
        selectExerciseGroups(exerciseTypeToEdit.exercise_groups);
        $scope.isChoosingExerciseTypes = false;
      }

      $scope.onCreateExerciseTypeClicked = function () {
        editExerciseType(new ExerciseType());
      };

      $scope.onNewExerciseSaveClicked = function () {
        $scope.editedExerciseType.exercise_groups = $scope.getSelectedGroupIds();
        $scope.editedExerciseTypeSaving = $scope.editedExerciseType.$save(function () {
          $scope.isChoosingExerciseTypes = true;
          refreshExerciseTypesList();
          unselectExerciseGroups();
        });
      };

      $scope.onNewExerciseCancelClicked = function () {
        $scope.isChoosingExerciseTypes = true;
        unselectExerciseGroups();
      };

      $scope.onExerciseTypeEditClicked = function (exerciseType) {
        editExerciseType(new ExerciseType(exerciseType));
      };

      $scope.editExerciseTypeTitle = function () {
        return $scope.editedExerciseType && $scope.editedExerciseType.id ? "Edit exercise type" : "Create new exercise type";
      }
    }]
  };
}]);

exerciseTypePanel.filter('bySelectedGroups', function () {
  return function (exerciseTypes, selectedGroups) {
    if (_.isEmpty(selectedGroups))
      return exerciseTypes;
    return _.filter(exerciseTypes, function (exerciseType) {
      return _.all(selectedGroups, function (selectedGroup) {
        return _.contains(exerciseType.exercise_groups, selectedGroup);
      });
    });
  };
});

var exerciseTypePanel = angular.module('exerciseTypes.exerciseTypePanel', [
  'exerciseTypes.exerciseType',
  'users.exerciseTypes.photos',
  'util.filters.propsFilter',
  'util.promiseUi',
  'ui.bootstrap',
  'exerciseGroups.exerciseGroup',
  'exerciseTypes.exerciseTypeEditor'
]);

exerciseTypePanel.directive('exerciseTypePanel', [function () {
  return {
    restrict: 'E',
    scope: {onExerciseTypeClicked: '&'},
    templateUrl: '<%= asset_path('exerciseTypes/exercise-type-panel.html') %>',
    controller: ['$scope', 'ExerciseType', 'UserExerciseTypePhotos', 'ExerciseGroup', function ($scope, ExerciseType, UserExerciseTypePhotos, ExerciseGroup) {
      $scope.NO_GROUP = 'noGroup';
      $scope.selection = {};
      $scope.isChoosingExerciseTypes = true;

      function refreshExerciseTypesList() {
        $scope.exerciseTypes = ExerciseType.query();
      }

      function unselectExerciseGroups() {
        $scope.selection.group = $scope.NO_GROUP;
        $scope.selection.machineGroup = $scope.NO_GROUP;
      }

      refreshExerciseTypesList();
      unselectExerciseGroups();

      function indexOfGroup(exerciseGroup) {
        var indexOfDash = exerciseGroup.indexOf('-');
        return indexOfDash < 0 ? null : parseInt(exerciseGroup.substring(indexOfDash + 1));
      }

      $scope.getSelectedGroupIds = function () {
        return _.filter(
          [indexOfGroup($scope.selection.group), indexOfGroup($scope.selection.machineGroup)],
          _.isNumber
        );
      };

      UserExerciseTypePhotos.primaryPhotos(function (exerciseTypePhotos) {
        $scope.exerciseTypeIdToThumbPath = _.object(_.map(exerciseTypePhotos, function (el) {
          return [el.exercise_type_id, el.thumb_image_url];
        }));
      });

      $scope.allExerciseGroups = ExerciseGroup.query(function (exerciseGroups) {
        $scope.exerciseGroups = _.filter(exerciseGroups, function (exerciseGroup) {
          return !exerciseGroup.is_machine_group;
        });
        $scope.machineGroups = _.filter(exerciseGroups, function (exerciseGroup) {
          return exerciseGroup.is_machine_group;
        });
      });

      $scope.hasAnyGroups = function () {
        return !_.isEmpty($scope.machineGroups) || !_.isEmpty($scope.exerciseGroups);
      };

      $scope.getPrimaryPhoto = function (exerciseType) {
        if ($scope.exerciseTypeIdToThumbPath) {
          var thumbPhotoSrc = $scope.exerciseTypeIdToThumbPath[exerciseType.id];
          if (thumbPhotoSrc) {
            return thumbPhotoSrc;
          }
        }
        return 'images/medium/missing.png';
      };


      $scope.onCreateExerciseTypeClicked = function () {
        unselectExerciseGroups();
        $scope.newExerciseType = new ExerciseType();
        $scope.isChoosingExerciseTypes = false;
      };

      $scope.onNewExerciseSaveClicked = function () {
        $scope.newExerciseType.exercise_groups = $scope.getSelectedGroupIds();
        $scope.newExerciseTypeSaving = $scope.newExerciseType.$save(function () {
          $scope.isChoosingExerciseTypes = true;
          refreshExerciseTypesList();
          unselectExerciseGroups();
        });
      };

      $scope.onNewExerciseCancelClicked = function () {
        $scope.isChoosingExerciseTypes = true;
      };
    }]
  };
}]);

exerciseTypePanel.filter('bySelectedGroups', function () {
  return function (exerciseTypes, selectedGroups) {
    if (_.isEmpty(selectedGroups))
      return exerciseTypes;
    return _.filter(exerciseTypes, function (exerciseType) {
      return _.all(selectedGroups, function (selectedGroup) {
        return _.contains(exerciseType.exercise_groups, selectedGroup);
      });
    });
  };
});

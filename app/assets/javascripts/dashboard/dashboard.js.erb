var dashboard = angular.module('dashboard', [
  'ui.router',
  'results',
  'nvd3',
  'exerciseGroups.exerciseGroup',
  'util.promiseUi',
  'measurements.stats',
  'dashboard.overview',
  'dashboard.user',
  'dashboard.user.summary',
  'dashboard.user.calendar',
  'dashboard.user.calendar.overview',
  'dashboard.user.calendar.details'
]);

dashboard.factory('Dashboard', ['$resource', function ($resource) {
  return $resource('/api/v1/dashboard/:action.json', {},
    {
      monthlyOverview: {method: 'GET', isArray: true, params: {action: 'monthly_overview'}},
      ratingCounts: {method: 'GET', isArray: true, params: {action: 'rating_counts'}},
      totalRest: {method: 'GET', isArray: true, params: {action: 'total_rest'}},
      plannedRest: {method: 'GET', isArray: true, params: {action: 'planned_rest'}}
    }
  );
}]);


dashboard.config(['$stateProvider', function ($stateProvider) {
  var mainDashboard = {
    url: '/dashboard',
    abstract: true,
    templateUrl: '<%= asset_path('dashboard/dashboard.html') %>',
    controller: 'DashboardCtrl'
  };

  var dashboardOverview = {
    url: '/',
    templateUrl: '<%= asset_path('dashboard/dashboard-overview.html') %>',
    controller: 'DashboardOverviewCtrl'
  };

  var userDashboard = {
    url: '/:userId',
    abstract: true,
    templateUrl: '<%= asset_path('dashboard/dashboard-user.html') %>',
    controller: 'DashboardUserCtrl',
    resolve: {
      userDashboardOptions: ['$stateParams', '$q', function ($stateParams, promise) {
        return {
          userIdPromise: promise(function (resolve) {
            resolve($stateParams.userId);
          }),
          statePrefix: 'main.dashboard'
        };
      }]
    }
  };

  var userSummaryDashboard = {
    url: '/summary/:filter',
    templateUrl: '<%= asset_path('dashboard/dashboard-user-summary.html') %>',
    controller: 'DashboardUserSummaryCtrl',
    params: {filter: 'all'}
  };

  var userCalendarDashboard = {
    url: '/calendar/:trainingId',
    templateUrl: '<%= asset_path('dashboard/dashboard-user-calendar.html') %>',
    controller: 'DashboardUserCalendarCtrl'
  };

  var userCalendarOverviewDashboard = {
    url: '/overview',
    templateUrl: '<%= asset_path('dashboard/dashboard-user-calendar-overview.html') %>',
    controller: 'DashboardUserCalendarOverviewCtrl'
  };

  var userCalendarDetails = {
    url: '/details',
    templateUrl: '<%= asset_path('dashboard/dashboard-user-calendar-details.html') %>',
    controller: 'DashboardUserCalendarDetailsCtrl'
  };

  $stateProvider.state('main.dashboard', mainDashboard);
  $stateProvider.state('main.dashboard.overview', dashboardOverview);
  $stateProvider.state('main.dashboard.user', userDashboard);
  $stateProvider.state('main.dashboard.user.summary', userSummaryDashboard);
  $stateProvider.state('main.dashboard.user.calendar', userCalendarDashboard);
  $stateProvider.state('main.dashboard.user.calendar.overview', userCalendarOverviewDashboard);
  $stateProvider.state('main.dashboard.user.calendar.details', userCalendarDetails);

  var myDashboard = {
    url: '/my-dashboard',
    abstract: true,
    templateUrl: '<%= asset_path('dashboard/my-dashboard.html') %>'
  };

  var userMyDashboard = _.extend(_.clone(userDashboard), {
    url: '',
    resolve: {
      userDashboardOptions: ['User', function (User) {
        return {
          userIdPromise: User.current().$promise.then(function (user) {
            return user.id;
          }),
          statePrefix: 'main.myDashboard'
        };
      }]
    }
  });

  $stateProvider.state('main.myDashboard', myDashboard);
  $stateProvider.state('main.myDashboard.user', userMyDashboard);
  $stateProvider.state('main.myDashboard.user.summary', _.clone(userSummaryDashboard));
  $stateProvider.state('main.myDashboard.user.calendar', _.clone(userCalendarDashboard));
  $stateProvider.state('main.myDashboard.user.calendar.overview', _.clone(userCalendarOverviewDashboard));
  $stateProvider.state('main.myDashboard.user.calendar.details', _.clone(userCalendarDetails));
}]);


dashboard.controller('DashboardCtrl', ['$scope', 'Trainee', '$state', 'toaster', function ($scope, Trainee, $state, toaster) {
    $scope.users = Trainee.query(_.noop, function () {
      toaster.pop("error", "Trainees listing", "Could get the list of trainees. Try logging in again.");
    });

    $scope.getCurrentUserId = function () {
      return $state.params.userId === undefined ? null : parseInt($state.params.userId);
    };

    $scope.onUserSelected = function (user) {
      if (_.isUndefined(user)) {
        $state.go('main.dashboard.overview');
      } else {
        $state.go('main.dashboard.user.summary', {userId: user.id, filter: 'all'});
      }
    };
  }]
);
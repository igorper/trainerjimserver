var dashboard = angular.module('dashboard', [
  'ui.router',
  'results',
  'nvd3',
  'util.promiseUi'
]);

dashboard.config(['$stateProvider', function ($stateProvider) {
  $stateProvider.state('main.dashboard', {
    url: '/dashboard',
    abstract: true,
    templateUrl: "<%= asset_path('dashboard/dashboard.html') %>",
    controller: ['$scope', 'Trainee', '$state', 'toaster', function ($scope, Trainee, $state, toaster) {
      $scope.state = $state;

      $scope.users = Trainee.query(function () {
      }, function () {
        toaster.pop("error", "Trainees listing", "Could get the list of trainees. Try logging in again.");
      });

      $scope.getCurrentUserId = function () {
        return $state.params.id == "" ? null : parseInt($state.params.id);
      };

      $scope.onUserSelected = function (user) {
        $state.go('main.dashboard.user', {id: user === undefined ? '' : user.id});
      };
    }]
  });

  $stateProvider.state('main.dashboard.user', {
    url: '/:id',
    templateUrl: "<%= asset_path('dashboard/dashboard-user.html') %>",
    controller: ['$scope', 'Measurement', '$state', 'toaster', 'resultsUtil', 'ExerciseGroup', '$q', 'DashboardStats', function ($scope, Measurement, $state, toaster, resultsUtil, ExerciseGroup, promise, DashboardStats) {
      $scope.sortType = "date";
      $scope.sortReverse = false;
      $scope.periodName = "all";

      $scope.overviewCalculationPromise = promise
        .all({measurements: fetchMeasurements(), exerciseGroups: ExerciseGroup.query().$promise})
        .catch(overviewCalculationFailed)
        .then(function (fetchedData) {
          $scope.dashboardStats = new DashboardStats(fetchedData.measurements, fetchedData.exerciseGroups);
          $scope.items = _.map(fetchedData.measurements, function (measurement) {
            return resultsUtil.calculateResultsOverview(measurement, fetchedData.exerciseGroups);
          });
        });


      function fetchMeasurements() {
        if ($state.params.id === "") {
          return Measurement.detailedMeasurements().$promise;
        } else {
          return Measurement.detailedMeasurementsForUser({userId: $state.params.id}).$promise;
        }
      }

      function overviewCalculationFailed() {
        toaster.pop("error", "Error while fetching measurements", "Unable to fetch measurements. An unexpected error occurred.");
      }


      $scope.goToMeasurement = function (item) {
        $state.go('main.results', {trainee: $state.params.id, id: item.id});
      };

      $scope.allUsersSelected = function () {
        return $state.params.id === "";
      };

      $scope.options = {
        chart: {
          type: 'pieChart',
          x: function (d) {
            return d.exerciseGroup.name;
          },
          y: function (d) {
            return d.count;
          },
          showLabels: true,
          transitionDuration: 500,
          height: 300
        }
      };

      $scope.scatterOptions = {
        chart: {
          type: 'scatterChart',
          height: 450,
          color: d3.scale.category10().range(),
          scatter: {
            onlyCircles: false
          },
          showDistX: true,
          showDistY: true,
          tooltipContent: function (key) {
            return '<h3>' + key + '</h3>';
          },
          transitionDuration: 350,
          xAxis: {
            axisLabel: 'X Axis',
            tickFormat: function (d) {
              return d3.format('.02f')(d);
            }
          },
          yAxis: {
            axisLabel: 'Y Axis',
            tickFormat: function (d) {
              return d3.format('.02f')(d);
            },
            axisLabelDistance: 30
          }
        }
      };

      $scope.scatterData = generateData(4, 40);

      /* Random Data Generator (took from nvd3.org) */
      function generateData(groups, points) {
        var data = [],
          shapes = ['circle', 'cross', 'triangle-up', 'triangle-down', 'diamond', 'square'],
          random = d3.random.normal();

        for (var i = 0; i < groups; i++) {
          data.push({
            key: 'Group ' + i,
            values: []
          });

          for (var j = 0; j < points; j++) {
            data[i].values.push({
              x: random()
              , y: random()
              , size: Math.random()
              , shape: shapes[j % 6]
            });
          }
        }
        return data;
      }
    }]
  });
}]);


dashboard.filter('withinPeriodFilter', function () {
  function daysInPeriod(periodName) {
    switch (periodName) {
      case 'day':
        return 1;
      case 'week':
        return 7;
      case 'month':
        return 30;
      default:
        return undefined;
    }
  }

  function withinDaysFilter(items, days) {
    var from = new Date();
    from.setDate(from.getDate() - days);
    return _.filter(items, function (item) {
      return new Date(item.date) > from;
    });
  }

  return function (items, periodName) {
    var days = daysInPeriod(periodName);
    return _.isUndefined(days) ? items : withinDaysFilter(items, days);
  };
});

dashboard.factory('DashboardStats', [function () {
  function DashboardStats(measurements, exerciseGroups) {

    var exerciseGroupsCounts = countExerciseGroups(measurements);
    var exerciseGroupsLookup = toLookupById(exerciseGroups);
    var partitionedGroupCounts = partitionExerciseGroupCounts(exerciseGroupsLookup, exerciseGroupsCounts);

    this.muscleGroupCounts = partitionedGroupCounts[0];
    this.equipmentGroupCounts = partitionedGroupCounts[1];


    /**
     * @param measurements the measurement in which to count executed exercise groups.
     * @return a lookup object from exercise groups to the number of times they appeared in executed series
     * in the given measurements.
     */
    function countExerciseGroups(measurements) {
      var seriesToExerciseGroups = extractSeriesToExerciseGroupIdsLookup(measurements);
      var exerciseGroupCounts = {};
      _.each(measurements, function (measurement) {
        _.each(measurement.series_executions, function (seriesExecution) {
          _.each(seriesToExerciseGroups[seriesExecution.series_id], function (groupId) {
            exerciseGroupCounts[groupId] = 1 + (exerciseGroupCounts[groupId] || 0);
          });
        });
      });
      return exerciseGroupCounts;
    }

    /**
     * @return {*} a lookup object of series IDs to lists of group IDs to which these series belong.
     */
    function extractSeriesToExerciseGroupIdsLookup(measurements) {
      var seriesToExerciseGroups = {};
      _.each(measurements, function (measurement) {
        _.each(measurement.training.exercises, function (exercise) {
          _.each(exercise.series, function (serie) {
            seriesToExerciseGroups[serie.id] = _.union(exercise.exercise_type.exercise_groups, seriesToExerciseGroups[serie.id]);
          });
        });
      });
      return seriesToExerciseGroups;
    }

    function toLookupById(itemsWithIds) {
      return _.reduce(itemsWithIds, function (lookupById, item) {
        lookupById[item.id] = item;
        return lookupById;
      }, {});
    }

    function partitionExerciseGroupCounts(exerciseGroupsLookup, exerciseGroupCounters) {
      return _.chain(exerciseGroupCounters)
        .map(function (count, exerciseGroupId) {
          return {exerciseGroup: exerciseGroupsLookup[exerciseGroupId], count: count};
        })
        .partition(function (exerciseGroupAndCount) {
          return exerciseGroupAndCount.exerciseGroup.is_machine_group;
        })
        .value();
    }
  }

  return DashboardStats;
}]);
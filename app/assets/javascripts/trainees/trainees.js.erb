//= require shared/shared
//= require trainings/training
//= require workouts/selector/workoutSelector
//= require exerciseTypes/exerciseTypeEditor

angular.module('trainees', [
  'ui.router',
  'ui.bootstrap',
  'shared',
  'ui.grid',
  'ui.grid.cellNav',
  'trainings',
  'workouts.selector',
  'trainees.traineeThumb',
  'exerciseTypes.exerciseTypeEditor'
])
  .factory("Trainee", ["$resource", function ($resource) {
    return $resource("/api/v1/trainees/:id.json");
  }])
  .factory("TraineeTraining", ["$resource", function ($resource) {
    return $resource("/api/v1/trainees/:traineeId/trainings/:trainingId.json", null, {
      addPreparedWorkout: {method: 'POST', params: {isPreparedWorkout: true}}
    });
  }])
  .config(['$stateProvider', function ($stateProvider) {
    $stateProvider
      .state('main.trainees', {
        url: '/trainees',
        controller: "TraineesCtrl",
        templateUrl: "<%= asset_path('trainees/trainees.html') %>"
      })
      .state('main.trainee', {
        url: '/trainees/{traineeId:int}',
        controller: "TraineeCtrl",
        templateUrl: "<%= asset_path('trainees/trainee.html') %>"
      })
      .state('main.trainee.training', {
        url: '/training/:trainingId',
        controller: "TraineeTrainingCtrl",
        templateUrl: "<%= asset_path('trainees/trainee-training.html') %>",
        resolve: {
          traineeId: ['$stateParams', function ($stateParams) {
            return $stateParams.traineeId;
          }]
        }
      });
  }])
  .controller("TraineesCtrl", ['$scope', '$state', 'Trainee', 'toaster', 'uiGridConstants',
    function ($scope, $state, Trainee, toaster, uiGridConstants) {

      $scope.searchFilter = "";

      $scope.traineesGridConfig = {
        enableFiltering: true,
        columnDefs: [
          {name: 'full_name', enableSorting: true, filter: {condition: uiGridConstants.filter.CONTAINS}},
          {name: 'email', enableSorting: true, filter: {condition: uiGridConstants.filter.CONTAINS}},
          {name: 'id', visible: false}
        ],
        onRegisterApi: function (gridApi) {
          $scope.traineesGridApi = gridApi;
          gridApi.cellNav.on.navigate($scope, function (newRowCol, oldRowCol) {
            $state.go('main.trainee.training', {traineeId: newRowCol.row.entity.id, trainingId: ''});
          });
        }
      };

      function refreshTraineesList() {
        Trainee.query(function (trainees) {
          $scope.traineesGridConfig.data = trainees;
        }, function () {
          toaster.pop("error", "Trainees listing", "Could get the list of trainees. Try logging in again.");
        });
      }

      $scope.onTraineeClicked = function (trainee) {
        $state.go('main.trainee.training', {traineeId: trainee.id, trainingId: ''});
      };

      refreshTraineesList();
    }
  ])
  .controller("TraineeCtrl", ["$scope", "$state", 'Trainee', '$stateParams', 'toaster', 'Training', 'uiGridConstants', 'TraineeTraining', 'WorkoutSelector', 'TraineeTrainingUtils',
    function ($scope, $state, Trainee, $stateParams, toaster, Training, uiGridConstants, TraineeTraining, WorkoutSelector, TraineeTrainingUtils) {
      $scope.traineeWorkouts = [];
      $scope.selectedTraining = [];

      Trainee.get({id: $stateParams.traineeId}, function (trainee) {
        $scope.trainee = trainee;
      }, function () {
        toaster.pop("error", "Trainee", "Could show the trainee. Try logging in again.");
      });

      function refreshWorkoutsList() {
        TraineeTraining.query({traineeId: $stateParams.traineeId}, function (trainings) {
          $scope.traineeWorkouts = trainings;
        }, function () {
          toaster.pop("error", "Fetch workouts error", "Unable to fetch the list of workouts.");
        });
      }

      function selectTraining(workout) {
        $scope.selectedTraining = workout;
        $state.go('main.trainee.training', {trainingId: workout == null ? '' : workout.id});
      }

      $scope.addPreparedWorkout = function () {
        WorkoutSelector().result.then(function (selectedTraining) {
          TraineeTrainingUtils.addPreparedWorkout($stateParams.traineeId, selectedTraining.id);
        });
      };

      $scope.onWorkoutSelected = selectTraining;

      $scope.onWorkoutCreate = function () {
        selectTraining(null);
      };

      refreshWorkoutsList();
    }
  ])
  .controller("TraineeTrainingCtrl", ["$scope", "$state", '$stateParams', 'toaster', 'TraineeTraining', 'traineeId', 'TraineeTrainingUtils',
    function ($scope, $state, $stateParams, toaster, TraineeTraining, traineeId, TraineeTrainingUtils) {
      $scope.selectedTraining = [];

      function createEmptyTraining() {
        return new TraineeTraining({traineeId: traineeId, name: "Enter training name", exercises: []});
      }

      $scope.onUploadImageClicked = function (guid, description, file) {
        console.log(guid);
        console.log(description);
        console.log(file);
      };

      if ($stateParams.trainingId === '') {
        $scope.selectedTraining = createEmptyTraining();
      } else {
        TraineeTraining.get({traineeId: traineeId, trainingId: $stateParams.trainingId}, function (training) {
          $scope.selectedTraining = training;
        }, function () {
          toaster.pop("error", "Fetch workout error", "Unable to fetch the workout.");
        });
      }

      $scope.onSaveClicked = function (selectedTraining) {
        TraineeTrainingUtils.saveTrainingForTrainee(traineeId, selectedTraining);
      };

      $scope.onDeleteClicked = function (selectedTraining) {
        TraineeTraining.delete({traineeId: traineeId, trainingId: selectedTraining.id}, function () {
          toaster.pop("info", "Workout deleted", "The workout was successfully deleted.");
          $state.go('main.trainee.training', {trainingId: ''}, {reload: true});
        }, function () {
          toaster.pop("error", "Workout not deleted", "Could not delete the workout. Please try logging in again.");
        });

      };
    }
  ])
  .factory('TraineeTrainingUtils', ['$state', 'toaster', 'TraineeTraining', function ($state, toaster, TraineeTraining) {
    var self = {
      goToTrainingAndReload: function (training) {
        $state.go('main.trainee.training', {trainingId: training.id}, {reload: true});
      },
      showSaveSuccessPopup: function (savedTraining) {
        toaster.pop("success", "Training saved", "Sucessfully saved " + savedTraining.name);
      },
      addPreparedWorkout: function (traineeId, preparedTrainingId) {
        TraineeTraining.addPreparedWorkout(
          {traineeId: traineeId},
          {preparedTrainingId: preparedTrainingId}, function (savedTraining) {
            self.showSaveSuccessPopup(savedTraining);
            console.log(savedTraining);
            self.goToTrainingAndReload(savedTraining);
          });
      },
      saveTrainingForTrainee: function (traineeId, selectedTraining) {
        selectedTraining.$save({traineeId: traineeId}, function (training) {
          self.showSaveSuccessPopup(training);
          self.goToTrainingAndReload(training);
        }, function () {
          toaster.pop("error", "Training save error", "Error saving " + selectedTraining.name);
        });
      }
    };
    return self;
  }])
;
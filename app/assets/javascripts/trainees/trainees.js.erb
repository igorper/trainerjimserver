var trainees = angular.module('trainees', [
  'ui.router',
  'ui.bootstrap',
  'shared',
  'trainings',
  'workouts',
  'workouts.selector',
  'trainees.traineeThumb',
  'ngFileUpload',
  'exerciseTypes.exerciseTypeEditor'
]);

trainees.factory("Trainee", ["$resource", 'Upload', function ($resource, Upload) {
  var Trainee = $resource("/api/v1/trainees/:id.json");

  Trainee.setPhoto = function (trainee, photo) {
    return Upload.upload({
      url: '/api/v1/trainees/' + trainee.id + '/photo.json',
      method: 'POST',
      file: photo
    });
  };

  return Trainee;
}]);

trainees.factory("TraineeTraining", ["$resource", function ($resource) {
  return $resource("/api/v1/trainees/:traineeId/trainings/:trainingId.json", null, {
    addPreparedWorkout: {method: 'POST', params: {isPreparedWorkout: true}}
  });
}]);

trainees.config(['$stateProvider', function ($stateProvider) {
  $stateProvider
    .state('main.trainees', {
      url: '/trainees',
      controller: 'TraineesCtrl',
      templateUrl: '<%= asset_path('trainees/trainees.html') %>'
    })
    .state('main.trainee', {
      url: '/trainees/{traineeId:int}',
      controller: 'TraineeCtrl',
      templateUrl: '<%= asset_path('workouts/workouts.html') %>'
    })
    .state('main.trainee.training', {
      url: '/training/:trainingId',
      controller: "TraineeTrainingCtrl",
      templateUrl: '<%= asset_path('workouts/workout.html') %>'
    });
}]);

trainees.controller("TraineesCtrl", ['$scope', '$state', 'Trainee', 'toaster', 'Auth',
  function ($scope, $state, Trainee, toaster) {
    $scope.searchFilter = "";

    $scope.refreshTraineeList = function () {
      $scope.trainees = Trainee.query(function () {
      }, function () {
        toaster.pop("error", "Trainees listing", "Could not fetch the list of trainees. Try logging in again.");
      });
    };

    $scope.refreshTraineeList();

    $scope.onTraineeClicked = function (trainee) {
      $state.go('main.trainee.training', {traineeId: trainee.id, trainingId: ''});
    };
  }
]);

trainees.controller('TraineeCtrl', ['$scope', '$stateParams', 'TraineeTraining', 'Auth', 'WorkoutsCtrlHelper',
  function ($scope, $stateParams, TraineeTraining, Auth, WorkoutsCtrlHelper) {
    WorkoutsCtrlHelper($scope, {
      onAddPreparedWorkout: function (selectedTrainingId, successCallback) {
        return TraineeTraining.addPreparedWorkout(
          {traineeId: $stateParams.traineeId},
          {preparedTrainingId: selectedTrainingId},
          successCallback
        );
      },
      title: '',
      trainer: Auth.userDetails(),
      traineeId: $stateParams.traineeId,
      workoutStateName: 'main.trainee.training'
    });
  }
]);

trainees.controller('TraineeTrainingCtrl', ['$scope', '$state', '$stateParams', 'toaster', 'TraineeTraining', 'TraineeTrainingUtils',
  function ($scope, $state, $stateParams, toaster, TraineeTraining, TraineeTrainingUtils) {
    function createEmptyTraining() {
      return new TraineeTraining({traineeId: $scope.workoutsContext.traineeId, name: "Enter training name", exercises: []});
    }

    if ($stateParams.trainingId === '') {
      $scope.workoutsContext.selectedTraining = createEmptyTraining();
    } else {
      TraineeTraining.get({traineeId: $scope.workoutsContext.traineeId, trainingId: $stateParams.trainingId}, function (training) {
        $scope.workoutsContext.selectedTraining = training;
      }, function () {
        toaster.pop("error", "Fetch workout error", "Unable to fetch the workout.");
      });
    }

    $scope.onSaveClicked = function (selectedTraining) {
      TraineeTrainingUtils.saveTrainingForTrainee($scope.workoutsContext.traineeId, selectedTraining);
    };

    $scope.onDeleteClicked = function (selectedTraining) {
      TraineeTraining.delete({traineeId: $scope.workoutsContext.traineeId, trainingId: selectedTraining.id}, function () {
        toaster.pop("info", "Workout deleted", "The workout was successfully deleted.");
        $state.go('main.trainee.training', {trainingId: ''}, {reload: true});
      }, function () {
        toaster.pop("error", "Workout not deleted", "Could not delete the workout. Please try logging in again.");
      });
    };
  }
]);

trainees.factory('TraineeTrainingUtils', ['$state', 'toaster',
  function ($state, toaster) {
    var self = {
    goToTrainingAndReload: function (training) {
      $state.go('main.trainee.training', {trainingId: training.id}, {reload: true});
    },
    showSaveSuccessPopup: function (savedTraining) {
      toaster.pop("success", "Training saved", "Sucessfully saved " + savedTraining.name);
    },
    saveTrainingForTrainee: function (traineeId, selectedTraining) {
      selectedTraining.$save({traineeId: traineeId}, function (training) {
        self.showSaveSuccessPopup(training);
        self.goToTrainingAndReload(training);
      }, function () {
        toaster.pop("error", "Training save error", "Error saving " + selectedTraining.name);
      });
    }
  };
  return self;
}]);
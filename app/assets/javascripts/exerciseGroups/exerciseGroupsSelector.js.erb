var exerciseGroupsSelector = angular.module('exerciseGroups.exerciseGroupsSelector', [
  'util.promiseUi',
  'ui.bootstrap',
  'toaster'
]);

exerciseGroupsSelector.directive('exerciseGroupsSelector', [function () {
  return {
    restrict: 'E',
    scope: {selectedExerciseGroupIds: '=', exerciseGroups: '='},
    templateUrl: '<%= asset_path('exerciseGroups/exercise-groups-selector.html') %>',
    controller: ['$scope', function ($scope) {
      $scope.NO_GROUP = 'noGroup';
      $scope.selection = {};
      var exerciseGroupsInitialized = false;
      $scope.$watch('exerciseGroups', initialiseExerciseGroups);
      $scope.$watch('selectedExerciseGroupIds', refreshRadioButtonsSelection);
      $scope.$watchCollection('[selection.group, selection.machineGroup]', refreshSelectedGroupIds);

      function refreshRadioButtonsSelection(exerciseGroupIds) {
        if (exerciseGroupsInitialized) {
          $scope.selection.group = toRadioGroupSelection($scope.exerciseGroups, exerciseGroupIds, "group-");
          $scope.selection.machineGroup = toRadioGroupSelection($scope.machineGroups, exerciseGroupIds, "machineGroup-");
        }
      }

      function refreshSelectedGroupIds(newRadioSelection) {
        if (exerciseGroupsInitialized) {
          $scope.selectedExerciseGroupIds = _(newRadioSelection).map(idOfGroup).filter(_.isNumber);
        }
      }

      function initialiseExerciseGroups(exerciseGroups) {
        $scope.bodyGroups = _.filter(exerciseGroups, function (exerciseGroup) {
          return !exerciseGroup.is_machine_group;
        });
        $scope.machineGroups = _.filter(exerciseGroups, function (exerciseGroup) {
          return exerciseGroup.is_machine_group;
        });
        exerciseGroupsInitialized = true;
        refreshRadioButtonsSelection($scope.selectedExerciseGroupIds);
      }

      function toRadioGroupSelection(availableGroups, groupIds, radioGroupPrefix) {
        var foundExerciseGroup = _(availableGroups).find(function (exerciseGroup) {
          return _(groupIds).contains(exerciseGroup.id);
        });
        return foundExerciseGroup ? radioGroupPrefix + foundExerciseGroup.id : $scope.NO_GROUP;
      }

      function idOfGroup(exerciseGroup) {
        var indexOfDash = exerciseGroup.indexOf('-');
        return indexOfDash < 0 ? null : parseInt(exerciseGroup.substring(indexOfDash + 1));
      }
    }]
  };
}]);

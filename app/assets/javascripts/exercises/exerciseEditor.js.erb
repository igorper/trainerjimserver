var exerciseEditorModule = angular.module('exercises.editor', [
  'ui.bootstrap',
  'ngSanitize',
  'exercises.dials',
  'trainees',
  'photos.takePhotoDialog',
  'users.exerciseTypes.photos',
  'util.promiseUi'
]);

exerciseEditorModule.directive('exerciseEditor', function () {
  return {
    restrict: 'E',
    scope: {
      exercise: '=',
      training: '=',
      trainer: '=',
      onExerciseRemove: '&',
      onApplyToAllSeries: '&'
    },
    controller: ['$scope', 'TakePhotoDialog', 'UserExerciseTypePhotos', function ($scope, TakePhotoDialog, UserExerciseTypePhotos) {

      $scope.selectedSeries = $scope.exercise.series[0];

      $scope.setExerciseToManual = function () {
        $scope.exercise.guidance_type = 'manual';
      };

      $scope.setExerciseToDuration = function () {
        $scope.exercise.guidance_type = 'duration';
      };

      function hideDescription() {
        $scope.showDescription = false;
      }

      function uploadExerciseTypePhoto(photos) {
        var traineeId = $scope.training.trainee.id;
        var exerciseTypeId = $scope.exercise.exercise_type.id;
        $scope.photoUploaded = UserExerciseTypePhotos
          .add(traineeId, exerciseTypeId, photos[0])
          .then(hideDescription);
      }

      $scope.onTakePhotosClicked = function () {
        TakePhotoDialog().result.then(uploadExerciseTypePhoto);
      };
    }],
    templateUrl: '<%= asset_path('exercises/exercise-editor.html') %>'
  };
});

exerciseEditorModule.directive('exerciseSeriesEditor', function () {
  return {
    restrict: 'E',
    scope: {
      exercise: '=',
      selectedSeries: '='
    },
    controller: ['$scope', function ($scope) {
      var repetitionsStep = 1;
      var durationStep = 25;
      var weightStep = 5;
      var restStep = 5;
      var durationExerciseType = "duration";

      function isDurationType() {
        return $scope.exercise.guidance_type == durationExerciseType;
      }

      $scope.changeSelectedSeries = function (series) {
        $scope.selectedSeries = series;
      };

      $scope.getFirstFieldLabel = function () {
        return isDurationType() ? "duration seconds" : "reps"
      };

      $scope.incrementFirstField = function () {
        $scope.selectedSeries.repeat_count += isDurationType() ? durationStep : repetitionsStep;
      };

      $scope.decrementFirstField = function () {
        var step = isDurationType() ? durationStep : repetitionsStep;
        if ($scope.selectedSeries.repeat_count <= step) {
          $scope.selectedSeries.repeat_count = 0;
        } else {
          $scope.selectedSeries.repeat_count -= step;
        }
      };

      $scope.increaseSeriesWeight = function () {
        $scope.selectedSeries.weight += weightStep;
      };

      $scope.decreaseSeriesWeight = function () {
        var series = $scope.selectedSeries;
        series.weight = series.weight < weightStep ? 0 : series.weight - weightStep;
      };

      $scope.increaseSeriesRest = function () {
        $scope.selectedSeries.rest_time += restStep;
      };

      $scope.decreaseSeriesRest = function () {
        var series = $scope.selectedSeries;
        series.rest_time = series.rest_time < restStep ? 0 : series.rest_time - restStep;
      };

    }],
    templateUrl: '<%= asset_path('exercises/exercise-series-editor.html') %>'
  };
});


exerciseEditorModule.directive('seriesEditor', function () {
  return {
    restrict: 'E',
    scope: {
      series: '=',
      onSelectedSeriesChanged: '&'
    },
    controller: ['$scope', function ($scope) {

      $scope.selectedSeriesIndex = 0;
      $scope.selectedSeries = $scope.series[0];

      $scope.changeSelectedSeries = function (seriesIdx) {
        $scope.selectedSeriesIndex = seriesIdx;
        $scope.selectedSeries = $scope.series[seriesIdx];
        $scope.onSelectedSeriesChanged({series: $scope.selectedSeries});
      };

      $scope.addSeries = function () {
        $scope.series.push(angular.copy($scope.selectedSeries));
      };

      $scope.removeSeries = function () {
        if ($scope.series.length > 1) {
          $scope.series.splice($scope.selectedSeriesIndex, 1);
          if ($scope.selectedSeriesIndex >= $scope.series.length) {
            $scope.changeSelectedSeries($scope.series.length - 1);
          } else {
            $scope.changeSelectedSeries($scope.selectedSeriesIndex);
          }
        }
      };

      $scope.incrementDuration = function () {
        $scope.selectedSeries.repeat_count += 25;
      };

      $scope.decrementDuration = function () {
        $scope.selectedSeries.repeat_count -= 25;
      };
    }],
    templateUrl: '<%= asset_path('exercises/series-editor.html') %>'
  };
});
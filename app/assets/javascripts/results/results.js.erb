var results = angular.module('results', [
  'ui.router',
  'ui.bootstrap',
  'users',
  'ui.calendar',
  'measurements',
  'util.promiseUi',
  'util.filters.propsFilter'
]);

results.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider) {
  $stateProvider
    .state('main.results', {
      url: "/results?:id&:trainee",
      controller: "ResultsCtrl",
      templateUrl: '<%= asset_path('results/results.html') %>'
    });
}]);

results.controller("ResultsCtrl", ['$scope', '$http', 'Measurement', '$compile', 'uiCalendarConfig', '$stateParams', '$state',
  'toaster', 'Trainee', 'User', 'resultsUtil',
  function ($scope, $http, Measurement, $compile, uiCalendarConfig, $stateParams, $state, toaster, Trainee, User,
            resultsUtil) {
    var lookupSeries = null;

    $scope.selectedTraining = null;
    $scope.trainingPage = null;
    $scope.calendarSources = [];

    $scope.overview = {};

    $scope.user = {};
    $scope.users = [];

    $scope.userDetails = User.current(function (userDetails) {
      $scope.results = Measurement.query({userId: $stateParams.trainee == undefined ? userDetails.id : $stateParams.trainee}, function (measurements) {
        for (var i = 0; i < measurements.length; i++) {
          var measurement = measurements[i];
          $scope.calendarSources.push([{
            start: new Date(measurement.start_time),
            end: new Date(measurement.end_time),
            className: 'smile-icon',
            training: measurement
          }])
        }

      }, function () {
        console.error("Could not fetch exercises.");
      });
    });

    Trainee.query(function (trainees) {
      $scope.users = trainees;
      if ($stateParams.trainee) {
        $scope.user.selected = _.find($scope.users, function (u) {
          return u.id == parseInt($stateParams.trainee)
        });
      }
    }, function () {
      toaster.pop("error", "Trainees listing", "Could get the list of trainees. Try logging in again.");
    });

    if ($stateParams.id != undefined) {
      if ($stateParams.id) {
        $scope.selectedTraining = Measurement.get({id: $stateParams.id}, function () {
          // show the calendar for the selected training date
          $scope.uiConfig.calendar['defaultDate'] = $scope.selectedTraining.start_time;
          //uiCalendarConfig.calendars["myCalendar1"].fullCalendar("render");

          $scope.trainingPage = "Overview";

          $scope.overview = resultsUtil.calculateResultsOverview($scope.selectedTraining);
        }, function () {
          toaster.pop("error", "Fetch measurement error", "Unable to fetch the measurement");
        });
      }
    }


    $scope.onTraineeChanged = function (item, model) {
      $state.go('main.results', {id: undefined, trainee: item == undefined ? null : item.id});
    };

    $scope.alertOnEventClick = function (date, jsEvent, view) {
      $state.go('main.results', {id: date.training.id});
    };

    $scope.isDurationExercise = function (exercise) {
      return exercise.guidance_type === 'duration';
    };

    /* Render Tooltip */
    $scope.eventRender = function (event, element, view) {
      // TODO: tooltip
      //element.attr({'tooltip': event.title,
      //  'tooltip-append-to-body': true});
      //$compile(element)($scope);

      var smileyStatus = $scope.selectedTraining && $scope.selectedTraining.id === event.training.id ? "on" : "off";
      element.find(".fc-content").addClass(resultsUtil.constants.smileLookup[event.training.rating] + "-" + smileyStatus);
      element.find(".fc-content").empty();

    };
    $scope.uiConfig = {
      calendar: {
        height: 450,
        header: {
          right: 'today prev,next'
        },
        eventClick: $scope.alertOnEventClick,
        eventRender: $scope.eventRender
      }
    };
  }
]);

results.directive('ghVisualization', [function () {

  // constants
  var width = 100;

  return {
    restrict: 'E',
    scope: {
      rest: '=',
      expected: '=',
      actual: '=',
      label: '='
    },
    link: function (scope, element, attrs) {
      // set up initial svg object
      var chart = d3.select(element[0])
        .append("svg")
        .attr("class", "chart")
        .attr("width", width)
        .attr("height", 30);

      var ex, ac, rest, label;

      function refreshBar() {
        if (ex === undefined || ac === undefined || rest === undefined) {
          return;
        }

        var scale = d3.scale.linear()
          .domain([0, d3.max([ex, ac])])
          .range([0, width]);

        // draw the blue box representing the expected quantity
        chart.append("svg:rect")
          .attr("class", "blue")
          .attr("width", scale(ex))
          .attr("height", 30);

        // draw the box visualizing the deviation from the expected quantity
        chart.append("svg:rect")
          .attr("class", rest ? (ac < ex ? "green" : "red") : (ac < ex ? "red" : "green"))
          .attr("x", scale(ac < ex ? ac : ex))
          .attr("y", 1)
          .attr("width", scale(ac < ex ? ex : ac))
          .attr("height", 28);

        // draw the vertical line that visualizes the expected quantity
        var xLine = scale(ex) == 0 ? scale(ex) + 2 : (scale(ex) == width ? scale(ex) - 2 : scale(ex));
        chart.append("line")
          .attr("x1", xLine)
          .attr("y1", 0)
          .attr("x2", xLine)
          .attr("y2", 30)
          .attr("stroke-width", 4)
          .attr("stroke", "black");

        chart.append("text")
          .attr("x", 20)
          .attr("y", 21)
          .text(label)
          .attr("font-size", "20px")
          .attr("font-weigth", "bold")
          .attr("fill", "white");

        // write the text with the actual and expected quantity
      }

      scope.$watch('expected', function (newVal, oldVal) {

        if (newVal === undefined) {
          return;
        }

        ex = newVal;

        refreshBar();
      });

      scope.$watch('actual', function (newVal, oldVal) {

        if (newVal === undefined) {
          return;
        }

        ac = newVal;

        refreshBar();
      });

      scope.$watch('rest', function (newVal, oldVal) {

        if (newVal === undefined) {
          return;
        }

        rest = newVal;

        refreshBar();
      });

      scope.$watch('label', function (newVal, oldVal) {

        if (newVal === undefined) {
          return;
        }

        label = newVal;

        refreshBar();
      });

    }
  }
}]);

results.factory('resultsUtil', [function () {
  var smileLookup = {0: "sweat", 1: "happy", 2: "bored"};
  var TOO_HARD_RATING = 0;
  var TOO_EASY_RATING = 2;

  return {
    constants: {
      smileLookup : smileLookup,
      tooHardRating : TOO_HARD_RATING,
      tooEasyRating: TOO_EASY_RATING
    },
    calculateResultsOverview: function (selectedTraining) {

      /**
       * Create a lookup table for planned series. Each series can be looked up by it's id, which is also stored
       * for each series execution. Besides each series data id of the parent exercise is added to retain the information
       * of the exercise the series belongs to.
       * @param trainingPlan
       * @returns {Array}
       */
      function getPlannedSeriesLookup(selectedTraining) {

        var performedSeriesIds = _.pluck(selectedTraining.series_executions, 'series_id');
        var expectedOrder = 1;
        var lookup = [];
        for (var i = 0; i < selectedTraining.training.exercises.length; i++) {
          var exercise = selectedTraining.training.exercises[i];
          for (var j = 0; j < exercise.series.length; j++) {
            var series = exercise.series[j];
            // save expected order for executed series (ignoring not executed series
            // does not mess the results if a particular series was skipped)
            if (_.contains(performedSeriesIds, series.id)) {
              series.expectedOrder = expectedOrder++;
            }
            series['exercise_id'] = exercise.exercise_type.id;
            lookup[series.id] = series;
          }
        }
        return lookup;
      }

      var lookupSeries = getPlannedSeriesLookup(selectedTraining);

      var overview = {};
      overview.trainingRatingIcon = smileLookup[selectedTraining.rating] + "-on"
      overview.durationInMinutes = (new Date(selectedTraining.end_time) - new Date(selectedTraining.start_time)) / (1000 * 60);

      overview.numExercisesPlanned = _.unique(_.pluck(_.pluck(selectedTraining.training.exercises, 'exercise_type'), 'id')).length;
      overview.performedSeries = selectedTraining.series_executions.length;
      overview.totalSeries = _.flatten(_.pluck(selectedTraining.training.exercises, 'series')).length;

      var performedSeriesExerciseId = [];
      var restInSeconds = 0, exerciseInSeconds = 0;
      var restDiff = 0;
      var cntDiffWeight = 0, sumDiffWeight = 0;
      var cntDiffReps = 0, sumDiffReps = 0;
      var cntHeavy = 0, cntEasy = 0;
      for (var i = 0; i < selectedTraining.series_executions.length; i++) {

        // encode order into the series execution
        selectedTraining.series_executions[i].order = i + 1;

        var se = selectedTraining.series_executions[i];
        var parentSeries = lookupSeries[se.series_id];
        parentSeries.execution = se;

        performedSeriesExerciseId.push(parentSeries.exercise_id);

        // calculate rest and exercise time
        restInSeconds += selectedTraining.series_executions[i].rest_time;
        exerciseInSeconds += selectedTraining.series_executions[i].duration_seconds;

        // rest difference
        restDiff += Math.abs(parentSeries.rest_time - se.rest_time);

        // weight difference
        cntDiffWeight += se.weight - parentSeries.weight == 0 ? 0 : 1;
        sumDiffWeight += Math.abs(se.weight - parentSeries.weight);

        // reps difference
        cntDiffReps += se.num_repetitions - parentSeries.repeat_count == 0 ? 0 : 1;
        sumDiffReps += Math.abs(se.num_repetitions - parentSeries.repeat_count);

        // count too heavy and too easy
        cntHeavy += se.rating == TOO_HARD_RATING ? 1 : 0;
        cntEasy += se.rating == TOO_EASY_RATING ? 1 : 0;
      }

      overview.numExercisesPerformed = _.unique(performedSeriesExerciseId).length;
      overview.totalRestInMinutes = restInSeconds / 60.0;
      overview.totalExercisesInMinutes = exerciseInSeconds / 60.0;
      overview.averageRestDifferenceInSec = restDiff / selectedTraining.series_executions.length;
      overview.numberWeightChanges = cntDiffWeight;
      overview.averageWeightChanges = cntDiffWeight == 0 ? 0 : sumDiffWeight / cntDiffWeight;
      overview.numberRepsChanges = cntDiffReps;
      overview.averageRepsChanges = cntDiffReps == 0 ? 0 : sumDiffReps / cntDiffReps;
      overview.numSeriesTooHeavy = cntHeavy;
      overview.numSeriesTooEasy = cntEasy;
      overview.id = selectedTraining.id;
      overview.name = selectedTraining.training.name;
      overview.date = selectedTraining.start_time;
      overview.comment = selectedTraining.comment;
      overview.seriesSkipped = overview.totalSeries - overview.performedSeries;
      overview.numberIntensityChanges = overview.numSeriesTooHeavy + overview.numSeriesTooEasy;

      return overview;
    }
  }
}]);